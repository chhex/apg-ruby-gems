#!/usr/bin/env ruby
# encoding: utf-8
require 'slop'
require 'json'
require 'artcli'
require 'pp'
require 'apgsecrets'
require 'filesize'
require 'tty-spinner'
require "csv"

def help(opts)
  puts "A Command Line Tool for interacting with Artifactory, Version: #{Artcli::VERSION} "
  puts opts
end

opts = Slop.parse do |o|
  o.string '-u', '--user', 'Admin user for artifactory operations, will be prompted for the password'
  o.bool '-lr', '--listRepos' , 'List Local Repositories matching a optional filter, additional optional parameter --repository', default: false
  o.bool '-ar', '--artifactsReport' , 'Csv report of all artifacts of a local repository, additional mandatory parameter : --repository', default: false
  o.bool '-lv', '--listVersions' , 'List all artifacts of a repository, additional mandatory parameters: --repository, --versions, optional: --type, --output', default: false
  o.bool '-dv', '--deleteVersions' , 'Delete artifacts Versions of a repository, additional mandatory parameters: --repository, --versions, optional: --type, --output', default: false
  o.bool '-er', '--emptyLocalRepo' , 'Empty repo = deleted all repo folders Local Repositories matching mandatory --repository <filter>  interactively', default: false
  o.bool '-sr', '--storageReport' , 'Csv storage info report of all repositories', default: false
  o.bool '-si', '--storageInfo' , 'Storage Info for a repository, additional mandatory parameter : --repository', default: false
  o.separator ''
  o.separator 'additional supporting options:'
  o.string '-r', '--repository', "Repository or repository filter, depending on option used"
  o.array '-v', '--versions', "List of comma seperated version filters for aql queries"
  o.string '-t', '--itemType' , 'Item type for aql queries, can have to value <file>,<folder> or <any>', default: 'folder'
  o.string '-o', '--output', 'Output file for csv report output', default: 'report.csv'
  o.string '-s', '--separator', 'Column separator to use for writing csv reports', default: ','
  o.string '-i', '--uri', 'Base Artifactory URI, without https:// prefix. Default : artifactory4t4apgsga.jfrog.io/artifactory', default: 'artifactory4t4apgsga.jfrog.io/artifactory'
  o.bool '-f' , '--force', 'Force prompt for password, normally password will be cached encrypted ', default: false
  o.bool '-d' , '--dry', 'The operations , which change something, will only be simulated', default: false
  o.on '-h', '--help' do
    help(o)
    exit
  end
end
# Test Preconditions
unless opts[:user]
  help(opts)
  puts 'Error: Artifactory Admin user must be specified with -u or --user'
  exit
end


unless opts[:repository] or opts[:storageReport]
  help(opts)
  puts 'Error: Repository option --repository <name or filter> need, can also be "" , depending on usage'
  exit
end

# Establishment of Preconditions : Entering and Storing Password
secrets = Secrets::Store.new
secrets.prompt_only_when_not_exists(opts[:user], 'Enter artifactory password and enter return:    ',opts[:force])
# Artifactory functionality
command = Artcli::Cli.new(opts[:uri], opts[:user], secrets.retrieve(opts[:user]), opts[:dry])
if opts[:listRepos]
  puts "Filtered Local Repositories for #{opts[:uri]} with filter: <#{opts[:repository]}>"
  pp command.list_repositories(opts[:repository])
end
if opts[:emptyLocalRepo]
  command.clean_repositories_interactive(opts[:repository])
end
if opts[:listVersions]
  if opts[:versions].empty?
    help(opts)
    puts 'List artifact versions requires the options --version <filter><,filter>..., with 1 to n versions filters'
    exit
  end
  pp command.list_items_by_version(opts[:repository], opts[:versions], opts[:itemType] )
end
if opts[:deleteVersions]
  if opts[:versions].empty?
    help(opts)
    puts 'Delete artifact versions requires the options --version <filter><,filter>..., with 1 to n versions filters'
    exit
  end
  command.delete_version_items_interactively(opts[:repository], opts[:versions], opts[:itemType] )
end
if opts[:artifactsReport]
  report = Artcli::CsvReport.new(command,opts[:output],opts[:separator])
  report.artifacts_report(opts[:repository])
end
if opts[:storageReport]
  report = Artcli::CsvReport.new(command,opts[:output],opts[:separator])
  report.storage_info_report
end
if opts[:storageInfo]
  data = command.get_storage_info(opts[:repository])
  puts "Storage info for #{opts[:repository]}"
  puts data
end
puts 'Done.'